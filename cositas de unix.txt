#include <stdio.h> esto para la salida de texto
#include <unistd.h> esto para el fork

int main() {
	pid_t pid;
	pid_t pid_wait;
	int estado_hijo;
	
	if ((pid = fork()) == -1) {
		printf("Error\n");
		return 2;
	} else if (pid == 0) {
		printf("Soy el hijo %d y mi padre es %d\n", getpid(), getppid());
		return 0; //exit(0)
	}
		printf("Soy el padre %d y mi hijo es %d\n", getppid(), pid);
		//sleep(1);
		
		//para que el padre espere a la muerte de su primer hijo
		pid_wait = wait(&estado_hijo);
		if (pid_wait == -1) {
			printf("Error\n");
			return 3;
		}
		if (WIFEXITED(estado_hijo))
			printf("Mi hijo %d murio haciendo un exito(%d)\n", pid_wait, WEXITSTATUS(estado_hijo));
		else if (WIFSIGNALED(estado_hijo))
			printf("Mi hijo %d murio al recibir la senial %d\n", pid_wait, WTERMSIG(estado_hijo));
		//WIFEXITED boolean si el hijo ha muerto por exit y WEXITSTATUS da los 8 bits (el primero será 0) 
		//WIFSIGNALED boolean si el hijo murió por una señal, mira el primer bit del wait si es 1 es true
		//WTERMSIG si es true la WIFSIGNALED devuelve los 7 bits menos significativos
	return 0;
}

para crearlo vi cosa.c
para ejecutarlo 
make cosa
./cosa




echo $? indica como ha muerto el anterior proceso
	exit es de 0 - 127
	con una señal es 128 + la señal
	
	
wait -> (int * p_estado) int * la dirección de memoria de un entero , en c (&variable)